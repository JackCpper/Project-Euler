#code by myself
def compute(n):
    Fibonacci=[1,2]
    total=2
    while Fibonacci[-1]+Fibonacci[-2]<=n:
        Fibonacci.append(Fibonacci[-1]+Fibonacci[-2])
        if Fibonacci[-1]%2==0:
            total+=Fibonacci[-1]
    print(total)
compute(4000000)

#code by contributor1   using python
#This may be a small improvement.  The Fibonacci series is:
#1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610...
#Now, replacing an odd number with O and an even with E, we get:
#O, O, E, O, O, E, O, O, E, O, O, E, O, O, E...
#And so each third number is even.  We don't need to calculate the odd numbers.  Starting from an two odd terms x, y, the series is:
#x, y, x + y, x + 2y, 2x + 3y, 3x + 5y
#And in Python, my solution is:
def calcE():
	x = y = 1
	sum = 0
	while (sum < 1000000):
		sum += (x + y)
		x, y = x + 2 * y, 2 * x + 3 * y
	return sum
#With this, you don't need to use an % to calculate if a number is even.  Using a fast computer, this took less than 0.01 secs to calculate.

//code by kobranturre using STL
# include <iostream>
# include <algorithm>
# include <numeric>
# include <vector>

bool odd (int i) {
   return i & 1;
}
int main () {
   std :: vector <int> fib(30);
   fib[0] = 1;
   adjacent_difference (fib.begin(), fib.end()-1,fib.begin()+1,
                  std :: plus<int>());   
   fib.erase (std :: remove_if (fib.begin(), fib.end(), odd),
                     fib.end());
   clock_t end(clock() - start);
   std :: cout << accumulate (fib.begin(), fib.end(),
                     0);
   return 0;
}

//code by Galahad   using C
void fibi()
{
  float sum=0,y=0,z=1,buff=0;
  while(y<1000000)
  {
    if((int)y%2==0)
      sum+=y;
    buff=y+z;
    y=z;
    z=buff;
  }
  printf("%.0f",sum);
}
